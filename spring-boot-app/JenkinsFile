pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // Mount Docker socket to access the host's Docker daemon
    }
  }
  
  stages {
    stage('Clean Workspace') {
      steps {
        cleanWs()
      }
    }

    stage('Checkout') {
      steps {
        sh 'echo "Checking out source code..."'
        git branch: 'main', url: 'https://github.com/Tushar8117/Jenkins-project.git'
      }
    }

    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        sh 'cd spring-boot-app && mvn clean package'
      }
    }

    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://13.201.1.81:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
              cd spring-boot-app
              mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=$SONAR_URL
          '''
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "tushar8117/ultimate-cicd:${BUILD_NUMBER}"
      }
      steps {
        script {
          sh '''
              cd spring-boot-app
              docker build -t $DOCKER_IMAGE .
          '''
          def dockerImage = docker.image(DOCKER_IMAGE)
          docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
            dockerImage.push()
          }
        }
      }
    }

    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "Jenkins-project"
        GIT_USER_NAME = "Tushar8117"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
              git config user.email "tushardeshmukh8117@gmail.com"
              git config user.name "$GIT_USER_NAME"
              sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" spring-boot-app-manifests/deployment.yml
              git add spring-boot-app-manifests/deployment.yml
              git commit -m "Update deployment image to version ${BUILD_NUMBER}"
              git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
          '''
        }
      }
    }
  }

  post {
    always {
      echo 'Pipeline complete.'
    }
    
    failure {
      script {
        if (currentBuild.rawBuild.getLog().any { it.contains("Static Code Analysis") }) {
          emailext(
            subject: "SonarQube Analysis Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
            body: """<p>The SonarQube analysis has failed for the following job:</p>
                     <p>Job: ${env.JOB_NAME} #${env.BUILD_NUMBER}</p>
                     <p>Please review the build logs for more details.</p>""",
            recipientProviders: [[$class: 'DevelopersRecipientProvider']]
          )
        }
      }
    }
  }
}
